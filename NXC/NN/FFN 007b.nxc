/***************************************************************************/
// Feed-Forward Netz mit 3 Sensor-Eingaengen (Touch an S1, S2, S3)
// und 4 Ausgabe-Neurons (Anzeige auf dem Display)
// (c) H. W. 2008
/***************************************************************************/

string __gFTFontName;
inline void SetFont(string name) { __gFTFontName = name; }

#define printf1g( _x, _y, _format1, _value1) { \
  string sval1 = FormatNum(_format1, _value1); \
  FontTextOut(_x, _y, __gFTFontName, sval1); \
}

#define printfsg( _x, _y, _s) { FontTextOut(_x, _y, __gFTFontName, _s);}


inline int readkey() {
  int result = -1;

    if (ButtonPressed(BTN1, false))
      result = BTN1;
    else if (ButtonPressed(BTN2, false))
      result = BTN2;
    else if (ButtonPressed(BTN3, false))
      result = BTN3;
    else if (ButtonPressed(BTN4, false))
      result = BTN4;

    if (result <> -1)  while(ButtonPressed(result, false));

    return result;
}


bool keypressed(){
   char test;
   test=( ButtonPressed(BTN1, false) || ButtonPressed(BTN2, false)
       || ButtonPressed(BTN3, false) || ButtonPressed(BTN4, false));
   return test;
}


inline int getchar() {
  int result = -1;
  while (true) {
    if (ButtonPressed(BTN1, false))
      result = BTN1;
    else if (ButtonPressed(BTN2, false))
      result = BTN2;
    else if (ButtonPressed(BTN3, false))
      result = BTN3;
    else if (ButtonPressed(BTN4, false))
      result = BTN4;
    if (result <> -1)
      break;
    else
      Yield();
  }
  while(ButtonPressed(result, false));
  return result;
}

/*****************************************************************************/
// Sound: PlayNotes


struct Note
{
  unsigned int Frequency;
  unsigned int Duration;
};

Note ChordUp[] = {TONE_C4, 50, TONE_E4, 50, TONE_G4, 50,
  TONE_C5, 50, TONE_E5, 50, TONE_G5, 50, TONE_C6, 200};

Note ChordDn[] = {TONE_C6, 50, TONE_G5, 50, TONE_E5, 50,
  TONE_C5, 50, TONE_G4, 50, TONE_E4, 50,  TONE_C4, 200};

Note BeepBeep[] = {TONE_C5, 200 , 0, 100, TONE_C5, 200};

Note Blip[] = {TONE_C7, 50 };

Note BlipBlip[] = {TONE_C7, 50, 0, 10, TONE_C7, 50};


void PlayTones(Note data[])
{
  for (int i = 0; i < ArrayLen(data); i++) {
    Note tmp = data[i];
    PlayTone(tmp.Frequency, tmp.Duration);
    Wait(tmp.Duration);
  }
}

/*****************************************************************************/

inline int round(float f)
{
  if (f>=0) {return (f + 0.5);}
  else
  {return (f - 0.5);}
}


// #include "nxcio.h"
// #include "math.h"
/*****************************************************************************/

byte ni=3;          // number of inputs
int  nz=4;          // number of output neurons

float Ni[nz][ni];   // inputs
float Nw[nz][ni];   // weights
float Nnet[nz];     // net (weighted sum)
float Nthr[nz];     // threshold
float Nout[nz];     // output

string MenuText;
char key;
float lf=0.7;


/***************************************************************************/
// propagate -> net
/***************************************************************************/

void PropagateNeuron(int z){   // Propagierungsfunktion 2 für Neuron nz
  int i=0;                          // kalkuliert den Gesamt-Input (net)
  float s=0;                        // abzueglich Schwellwert

  for(i=0;i<ni;i++){
     s+= (Ni[z][i]*Nw[z][i]);     // gewichtete Summe
  }
  Nnet[z]=s-Nthr[z];
}

/***************************************************************************/
// activate -> output
/***************************************************************************/

void ActivateNeuron(int z){         // Aktivierungsfunktion 1 T: x -> [0; +1]

   if (Nnet[z]>=0)                  // 0-1-Schwellwertfunktion
      {Nout[z]=1;}                  // Fkt.-Wert: 0 oder 1
   else {Nout[nz]=0;}
}


/***************************************************************************/
// Init  program
/***************************************************************************/

void Init() {
  SetFont("Tiny_6.ric");
  #download "Tiny_6.ric";
  SetLongAbort(true);
}


/***************************************************************************/
// Reset, Init Net
/***************************************************************************/

void ResetNeuron(int z){    // alles auf Null
   int i;

   for (i=0; i<ni; i++) {
     Ni[z][i]=0;       // Einzel-Input (Dendrit)
     Ni[z][i]=0;       // Einzel-Wichtung (Dendrit)
   }
   Nnet[z]=0;          // totaler Input
   Nthr[z]=0;          // Schwellenwert (threshold)
   Nout[z]=0;          // errechneter Aktivierungswert=Output
}



void InitAllNeurons(){              // alle Netz-Neurons auf Null
   int z;

   for (z=0; z<nz; z++) {           // Neuron-Schicht 0
        ResetNeuron(z);}
}


/***************************************************************************/
// Inputs
/***************************************************************************/


void InitAllSensors() {
    SetSensorTouch(0);
    SetSensorTouch(1);
    SetSensorTouch(2);
    SetSensorTouch(3);
}


inline void RefreshInputLayer() {  // get sensor inputs + store to neurons
   int i, z;

   for (z=0; z< nz; z++)
     for (i=0; i< ni; i++)   {
       Ni[z][i]=SensorValue(i);
   }
}


/***************************************************************************/
// ForwardPropagation
/***************************************************************************/

inline void ForwardPropagation() {
  int z;
  
  for(z=0; z<nz; z++) {
     PropagateNeuron(z);
     ActivateNeuron(z);
  }
}


/***************************************************************************/
// Display
/***************************************************************************/

task DisplayValues(){
  int i;  // inputs = sensors
  int z;  // neuron number = outputs
  int ibuf;
  float fbuf;

  while(true) {

    printfsg(0,56,"in..w1....w2....w3...thr..out.tOut");

    for(i=0; i<ni; i++) {
       ibuf= Ni[0][i];                                  // neuron inputs
       printf1g( 0, 48-(9*i),"%1d ",ibuf);                // (all inputs to all)
    }


    for(z=0; z<nz; z++) {

       for (i=0; i<ni; i++) {
          fbuf=Nw[z][i];
          printf1g( 9+i*6*3 ,48-(9*z),"%2.1f", fbuf);   // neuron weights
       }

       fbuf=Nthr[z];
       printf1g( 9+3*6*3 ,48-(9*z),"%2.1f", fbuf);      // neuron thrshold
       


       ibuf=round(Nout[z]);
       printf1g( 9+ 4*6*3 ,48-(9*z),"%1d "  , ibuf);      // neuron outputs
    }

    printfsg(0,0,MenuText);
  }

}



/***************************************************************************/

void LearnPerceptronRule() { // Perceptron-Lern-Modus
  int ErrorCount;

  int   i; // Anzahl Inputs
  int   j; // Anzahl Ausgabe-Neurons
  float targOut;
  int   ibuf;
  float thrbuf, wbuf, inbuf, outbuf;

 do
 {

  ErrorCount=0;
  PlayTones(ChordUp);
  MenuText="--            << ok >>            ++"; // Btn left, center, right

    RefreshInputLayer();     //  store current inputs
    ForwardPropagation();    //  calculate neuron output
    Wait(1);

    for (j=0; j<nz; j++)    //   up to number of output Neurons
    {
      ForwardPropagation(); //  calculate neuron output
      targOut=0;            //  targeted output

      MenuText="--            << ok >>            ++"; // Btn left, center, right

      ibuf=round(targOut);  printf1g( 14+ 4*6*3 ,48-(9*j),"%1d "  , ibuf);

      do                   //  Output correction
      {
          key=-1;
          if (keypressed()) {PlayTones(Blip); key=readkey();}

          if (key==BTNLEFT)  { targOut=0; }
          else
          if (key==BTNRIGHT) { targOut=1; }

          ibuf=targOut; printf1g( 14+ 4*6*3 ,48-(9*j),"> %1d " , ibuf);

          Wait(1);
      }   while ((key!=BTNCENTER)&&(key!=BTNEXIT));



      //...................................................

      if (key==BTNEXIT) {               // EXIT Learn program
          PlayTones(ChordDn);
          PlayTones(ChordUp);
          return;
      }
      //....................................................

                                        // LEARN-Mode START
      //....................................................

      if (targOut==Nout[j] )            // teachOut correct => do nothing
      {
          PlayTones(BlipBlip);
          Wait(10);
      }
      //....................................................

      if (targOut!=Nout[j])             // teachOut wrong  => start learning
         {
           PlayTones(BeepBeep);
           Wait(10);
           ErrorCount+=1;
                                                  // LEARNING:  Delta-Rule  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ERROR
            for (i=0; i<=ni; i++)                 // for all i (Inputs)
             {                                    // adjust all weights

                 wbuf=Nw[j][i]; inbuf= Ni[j][i]; outbuf= Nout[j];
                 wbuf= wbuf + (lf * inbuf * (targOut-outbuf));
                 Nw[j][i]=wbuf;
             }

             if (targOut!=Nout[j]) // adjust threshold (Delta-Rule, expanded)
             {
                 thrbuf= Nthr[j];  outbuf= Nout[j];
                 thrbuf = thrbuf + (lf *(targOut-outbuf));
                 Nthr[j]=thrbuf;
             }

      } // if (targOut!=Neuron[j].out)
      //...................................................

   } // for j


 } while (ErrorCount>0);

 PlayTones(ChordDn);

}



/***************************************************************************/

bool LearnIntr() {
   byte c=0;
   if (keypressed()) c=readkey();

   return (c==BTNCENTER);
}
   



task main() {
   Init();
   InitAllNeurons();
   InitAllSensors();

   start DisplayValues;

   while(true) {
      MenuText=" (running...learn:BtnCenter)";
      RefreshInputLayer();
      ForwardPropagation();
      if (LearnIntr()) {LearnPerceptronRule(); ClearScreen();}
   }

}


