
// "speech" "recognition" 0.18

// programming language: NXC for Mindstorms NXT
// (c) HaWe 2011
// mail to: HaWe(at)SiriusCyberneticCorporation.org

// speak, and watch the real-time oscillograph.
// if the oscillograph appears the 2nd time you may press BtnCenter to store.

///////////////////////////////////////////////////////////////////////////////
#define printf1( _x, _y, _format1, _value1) { \
  string sval1 = FormatNum(_format1, _value1); \
  TextOut(_x, _y, sval1); \
}

#define printf2( _x, _y, _format1, _format2, _value1, _value2) { \
  string sval1 = FormatNum(_format1, _value1); \
  string sval2 = FormatNum(_format2, _value2); \
  string s =sval1+sval2; \
  TextOut(_x, _y, s); \
}

///////////////////////////////////////////////////////////////////////////////

inline bool btnhit(){
   return ( ButtonPressed(BTN1, false) || ButtonPressed(BTN2, false)
         || ButtonPressed(BTN3, false) || ButtonPressed(BTN4, false));
}


char LCDline[]={56,48,40,32,24,16,8,0};

///////////////////////////////////////////////////////////////////////////////

#define MinPause  80
#define dbOffset  30
#define MaxRecLen 512
#define RecSlots  16

int  SoundLevel, BGrndNoise=50, dbMax;
int  SoundRecord[MaxRecLen];             // detection: 0...MaxRecLen:
byte SoundPattern[MaxRecLen][RecSlots];  // patterns
char key;



task SoundCheck() {
  int t,       // timer counter
      p,       // pause counter
      i, j,    // index
      peak,    // for oscilligraph
      slot=1,  // slot for sound records
      j_best,  // slot which matchs best
      d2,
      buf;
      
  long sum[MaxRecLen], sum_min;
  string str;

  while(true) {
    str=".";
    SoundLevel=SensorValue(S2);
    printf1(0,LCDline[0], "%s", "Loudness=");
    printf1(60,LCDline[0], "%4d", SoundLevel);

    ////////////////////////////////////////
    //  record if min sound level reached //
    ////////////////////////////////////////
    if (SoundLevel>(BGrndNoise + dbOffset)) {
      p=dbMax=0;
      t=1;
      key=-1;

      ClearScreen();
      ArrayInit (SoundRecord, 0, MaxRecLen);
      while (t<MaxRecLen) {
        SoundRecord[t]=SoundLevel=SensorValue(S2);

        //printf1(70,LCDline[0], "%4d", SoundLevel);
        if (SoundLevel > dbMax) dbMax=SoundLevel;

        // if observe Pause then Rec_Stop
        p= (SoundLevel<dbOffset)? p+1 : 0;
        if (p==MinPause) break;

        // printf1(0, LCDline[7], "%s", str);
        if (t%3==0) {
          peak=(SoundRecord[t]);
          LineOut ((t+1)/3, 0, (t+1)/3, peak/8);
        }
        
        Wait(3);
        t++;
        if(t%25==0) str+=".";
      }
      SoundRecord[0]=t-MinPause; // store current recording duration

      printf1(0, LCDline[7], "%s", "store: press BtnCtr" );
      if (t<100) Wait(200);


      //..........................
      if (btnhit()) key=getchar();
      //..........................

      //////////////////////////////////////////
      //   normalize to sound level steps     //
      //////////////////////////////////////////
      for (i=1; i<MaxRecLen; i++) {

        buf=SoundRecord[i];
        if (buf<(BGrndNoise/8))
          SoundPattern[i][0]=0;
        else
          SoundPattern[i][0]=((buf*127/dbMax)/8)*8;
      }

      ClearScreen();
      for ( i=1; i<MaxRecLen-3; i+=3) {
         peak=(SoundPattern[i][0] );
         LineOut ((i+1)/3, 0, (i+1)/3, peak/2);
      }
         //..........................
         if (btnhit()) key=getchar();
         //..........................

      Wait(500);
      ClearScreen();


      SoundPattern[0][0]=SoundRecord[0]; // store current recording duration

      //////////////////////////////////////////
      //   allow sound record to be stored    //
      //////////////////////////////////////////
      //..........................
      if (btnhit()) key=getchar();
      //..........................
      ClearScreen();

      if ( key == BTNCENTER ) {
         key=-1;
         printf1(0, LCDline[1], "%s", "store in slot:");
         printf1(0, LCDline[7], "%s", "<<-1 OK/esc +1>>");
         while (key!=BTNEXIT) {
           printf1(0, LCDline[2], "%2d", slot);
           key=getchar();

           if (key==BTNLEFT) {
             if (slot>1) slot--;
             else
             if (slot==1) slot=RecSlots-1;
           }
           else
           if (key==BTNRIGHT) {
             if (slot<RecSlots-1) slot++;
             else
             if (slot==RecSlots-1) slot=1;
           }
           else
           if (key==BTNCENTER) {
             for (i=0; i<MaxRecLen; i++) {
               SoundPattern[i][slot]=SoundPattern[i][0];
             }
             printf1(1, LCDline[2], "stored: Slot %2d", slot );
             Wait(300);
             key=BTNEXIT ;
           }
         } // while
         ClearScreen();
         key=-1;
      }
      
      else

      //////////////////////////////////////////
      //  compare and recognize sound record  //
      //////////////////////////////////////////

      {
        sum_min=LONG_MAX; j_best=INT_MAX;
        str=".";
        for (j=1; j<RecSlots; j++) {
          TextOut(0, LCDline[1], str);
          sum[j]=0;
          if (SoundPattern[0][j]>10) {
            for (i=1; i < MaxRecLen; i++) {
              d2=(SoundPattern[i][0]-SoundPattern[i][j]);
              d2=d2*d2;
              sum[j]=sum[j] + d2;
            }
          }
          else {
            sum[j]=LONG_MAX;
          }
          buf=sum[j];

          if (sum[j]<sum_min) {
            sum_min=sum[j];
            j_best=j;

          }
          str+=".";
        } // for j

        ClearLine(LCDline[1]);
        if (j_best< INT_MAX)
          printf1(0, LCDline[1], "recogn=Pattern%2d", j_best );

      } // else compare
    }

  } // while
} // SoundCheck

task main(){

  SetLongAbort(true);
  SetSensorType(S2, SENSOR_TYPE_SOUND_DBA);
  SetSensorMode(S2, SENSOR_MODE_RAW);

  Wait(500);
  BGrndNoise=SensorValue(S2)+18;

  StartTask(SoundCheck);
  while (true)  {


  }
}


