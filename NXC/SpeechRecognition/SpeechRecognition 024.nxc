///////////////////////////////////////////////////////////////////////////////
// "speech" recognition

   string version="0.24";
   
///////////////////////////////////////////////////////////////////////////////
// programming language: NXC for Mindstorms NXT
// author: HaWe 2011
// mail to: HaWe(at)SiriusCyberneticCorporation.org
///////////////////////////////////////////////////////////////////////////////
// speak, and watch the real-time oscillograph.
// if the oscillograph appears the 2nd time you may press BtnCenter to store.
///////////////////////////////////////////////////////////////////////////////

// io functions

#define printf1( _x, _y, _format1, _value1) { \
  string sval1 = FormatNum(_format1, _value1); \
  TextOut(_x, _y, sval1); \
}

#define printf2( _x, _y, _format1, _format2, _value1, _value2) { \
  string sval1 = FormatNum(_format1, _value1); \
  string sval2 = FormatNum(_format2, _value2); \
  string s =sval1+sval2; \
  TextOut(_x, _y, s); \
}

//*****************************************
char LCDline[]={56,48,40,32,24,16,8,0};

inline bool btnhit(){
   return ( ButtonPressed(BTN1, false) || ButtonPressed(BTN2, false)
         || ButtonPressed(BTN3, false) || ButtonPressed(BTN4, false));
}



///////////////////////////////////////////////////////////////////////////////

#define MinPause  80
#define dbOffset  30
#define MaxRecLen 256
#define RecSlots  16

int  SoundLevel, BGrndNoise=50, dbMax;
int  SoundRecord[MaxRecLen];             // detection: 0...MaxRecLen:
byte SoundPattern[MaxRecLen][RecSlots];  // patterns
char key;


///////////////////////////////////////////////////////////////////////////////
// File I/O
///////////////////////////////////////////////////////////////////////////////

inline void SoundExport() { // Data Export format: number-strings, seperated by ";"

  string sFileName = "FILE_EXP.dat";

  unsigned int nFileSize = (MaxRecLen*4); //3 byte for number (text) plus 1 (";") each
  byte fHandle;
  int IOresult, counter=0;
  int ibuf, i;
  string s;
  
  ClearScreen();
  TextOut( 0,48, "SpeechRecogn "+version);

  DeleteFile(sFileName);
  IOresult = CreateFile(sFileName, nFileSize, fHandle);
  if (IOresult == LDR_SUCCESS) {
    ClearScreen();
    for (i=0; i<MaxRecLen; i++)   {
        counter+=1;
        ibuf= SoundRecord[i];

        printf1( 0, 32, "counter =%5d", counter);
        printf1( 0, 24, "loudness=%5d", ibuf);

        s=NumToStr(ibuf);
        s=s + ";" ;
        fputs(s, fHandle);
    }
    CloseFile(fHandle);
    printf1( 0,16, "%s", "! FILE STORED !");
  }
  else  {
    printf1( 0,16, "%s", "Error-Save-Error");
    Wait(1000);
  }

}

//*****************************************

void WordSave(byte slot) {

  string s, sFileName;
  
  unsigned int nFileSize = (MaxRecLen*4); //3 byte for number (text) plus 1 (";") each
  byte fHandle;
  int IOresult, counter=0;
  int ibuf, i;

  s=FormatNum("%04d", slot);
  sFileName=StrCat(s, ".wpt");

  ClearScreen();
  TextOut( 0,48, "SpeechRecogn "+version);

  DeleteFile(sFileName);
  IOresult = CreateFile(sFileName, nFileSize, fHandle);
  if (IOresult == LDR_SUCCESS) {
    ClearScreen();
    for (i=0; i<MaxRecLen; i++)   {
        counter+=1;
        ibuf= SoundPattern[i][0];

        printf1( 0, 24, "counter =%5d", counter);
        printf1( 0, 16, "loudness=%5d", ibuf);

        WriteLn(fHandle, ibuf);
    }
    CloseFile(fHandle);
    printf1( 0,16, "%s", "! FILE STORED !");
  }
  else  {
    ClearScreen();
    printf1( 0,16, "%s", "Error-Save-Error");
    Wait(1000);
  }
}

//*****************************************

void LoadLanguageCenter() {

  string sFileName;

  unsigned int nFileSize;
  byte fHandle;
  int IOresult;
  int ibuf, i, j=0, slot;
  string s;

  ClearScreen();
  TextOut( 0,48, "SpeechRecogn "+version);

  ListFilesType tSearchArray;
  tSearchArray.Pattern = "*.wpt";
  SysListFiles(tSearchArray);

  while (tSearchArray.Result == NO_ERR && j < ArrayLen(tSearchArray.FileList))
  {
    ClearScreen();
    sFileName=tSearchArray.FileList[j];
    TextOut(0, LCDline[0], sFileName);
    s=SubStr(sFileName, 0, 4);
    slot=StrToNum(s);
    printf1( 0, LCDline[1], "slot=%3d", slot);

    IOresult = OpenFileRead(sFileName, nFileSize, fHandle);
    if (IOresult == LDR_SUCCESS) {
      for (i=0; i<MaxRecLen; i++)   {
        ReadLn (fHandle, ibuf);
        SoundPattern[i][slot]=ibuf;

        printf1( 0, LCDline[2], "counter =%5d", i);
        printf1( 0, LCDline[3], "loudness=%5d", ibuf);
      }

      CloseFile(fHandle);
      printf1( 0, LCDline[7], "FILE%3d RELOADED!", slot);
    }
    else {
      ClearScreen();
      printf1( 0, LCDline[7], "! ERROR ! FILE%3d", slot);
      Wait(1000);
    }
    ClearLine(LCDline[1]);
    ClearLine(LCDline[2]);
    ClearLine(LCDline[3]);
    j++;
  }
  
}


///////////////////////////////////////////////////////////////////////////////


task SoundCheck() {
  int t,       // timer counter
      p,       // pause counter
      i, j,    // index
      peak,    // for oscilligraph
      slot=1,  // slot for sound records
      j_best,  // slot which matchs best
      d2,
      buf;
      
  long sum[MaxRecLen], sum_min;
  string str;

  while(true) {
    str=".";
    SoundLevel=SensorValue(S2);
    printf1(0,LCDline[0], "%s", "Loudness=");
    printf1(60,LCDline[0], "%4d", SoundLevel);

    ////////////////////////////////////////
    //  record if min sound level reached //
    ////////////////////////////////////////
    if (SoundLevel>(BGrndNoise + dbOffset)) {
      p=dbMax=0;
      t=1;
      key=-1;

      ClearScreen();
      ArrayInit (SoundRecord, 0, MaxRecLen);
      while (t<MaxRecLen) {
        SoundRecord[t]=SoundLevel=SensorValue(S2);

        //printf1(70,LCDline[0], "%4d", SoundLevel);
        if (SoundLevel > dbMax) dbMax=SoundLevel;

        // if observe Pause then Rec_Stop
        p= (SoundLevel<dbOffset)? p+1 : 0;
        if (p==MinPause) break;

        // printf1(0, LCDline[7], "%s", str);
        if (t%2==0) {
          peak=(SoundRecord[t]);
          LineOut ((t+1)/2, 0, (t+1)/2, peak/8);
        }
        
        Wait(5);
        t++;
        if(t%25==0) str+=".";
      }
      SoundRecord[0]=t-MinPause; // store current recording duration

      printf1(0, LCDline[7], "%s", "store: press BtnCtr" );
      if (t<100) Wait(200);


      //..........................
      if (btnhit()) key=getchar();
      //..........................

      //////////////////////////////////////////
      //   normalize to sound level steps     //
      //////////////////////////////////////////
      for (i=1; i<MaxRecLen; i++) {

        buf=SoundRecord[i];
        SoundRecord[i]=(buf*127/dbMax);
        if (buf < BGrndNoise)
          SoundPattern[i][0]=0;
        else
          SoundPattern[i][0]=(SoundRecord[i]/8)*8;
      }

      ClearScreen();
      for ( i=1; i<MaxRecLen-3; i+=2) {
         peak=(SoundPattern[i][0] );
         LineOut ((i+1)/2, 0, (i+1)/2, peak/2);
      }
         //..........................
         if (btnhit()) key=getchar();
         //..........................

      ClearScreen();
      SoundPattern[0][0]=SoundRecord[0]; // store current recording duration

      // SoundExport();

      //////////////////////////////////////////
      //   allow sound record to be stored    //
      //////////////////////////////////////////
      //..........................
      if (btnhit()) key=getchar();
      //..........................
      ClearScreen();

      if ( key == BTNCENTER ) {
         key=-1;
         printf1(0, LCDline[1], "%s", "store in slot:");
         printf1(0, LCDline[7], "%s", "<<-1 OK/esc +1>>");
         while (key!=BTNEXIT) {
           printf1(0, LCDline[2], "%2d", slot);
           key=getchar();

           if (key==BTNLEFT) {
             if (slot>1) slot--;
             else
             if (slot==1) slot=RecSlots-1;
           }
           else
           if (key==BTNRIGHT) {
             if (slot<RecSlots-1) slot++;
             else
             if (slot==RecSlots-1) slot=1;
           }
           else
           if (key==BTNCENTER) {
             for (i=0; i<MaxRecLen; i++) {
               SoundPattern[i][slot]=SoundPattern[i][0];
             }
             printf1(1, LCDline[2], "stored: Slot %2d", slot );
             Wait(300);
             key=BTNEXIT ;
           }
         } // while
         ClearScreen();
         key=-1;

         WordSave(slot);
      }

      else

      //////////////////////////////////////////
      //  compare and recognize sound record  //
      //////////////////////////////////////////

      {
        sum_min=LONG_MAX; j_best=INT_MAX;
        str=".";
        for (j=1; j<RecSlots; j++) {
          TextOut(0, LCDline[1], str);
          sum[j]=0;
          if (SoundPattern[0][j]>10) {
            for (i=1; i < MaxRecLen; i++) {
              d2=(SoundPattern[i][0]-SoundPattern[i][j]);
              d2=d2*d2;
              sum[j]=sum[j] + d2;
            }
          }
          else {
            sum[j]=LONG_MAX;
          }
          buf=sum[j];

          if (sum[j]<sum_min) {
            sum_min=sum[j];
            j_best=j;

          }
          str+=".";
        } // for j

        ClearLine(LCDline[1]);
        if (j_best< INT_MAX)
          printf1(0, LCDline[1], "recogn=Pattern%2d", j_best );

      } // else compare
    }

  } // while true
} // SoundCheck

task main(){

  SetLongAbort(true);
  SetSensorType(S2, SENSOR_TYPE_SOUND_DBA);
  SetSensorMode(S2, SENSOR_MODE_RAW);

  Wait(500);
  BGrndNoise=SensorValue(S2)+18;
  LoadLanguageCenter();
  Wait(2000);

  StartTask(SoundCheck);
  while (true)  {

  }
}


