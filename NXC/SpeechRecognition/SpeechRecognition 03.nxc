///////////////////////////////////////////////////////////////////////////////
#define printf1( _x, _y, _format1, _value1) { \
  string sval1 = FormatNum(_format1, _value1); \
  TextOut(_x, _y, sval1); \
}

#define printf2( _x, _y, _format1, _format2, _value1, _value2) { \
  string sval1 = FormatNum(_format1, _value1); \
  string sval2 = FormatNum(_format2, _value2); \
  string s =sval1+sval2; \
  TextOut(_x, _y, s); \
}

///////////////////////////////////////////////////////////////////////////////

inline int readkey() {
  int result = 0;

    if (ButtonPressed(BTN1, false))
      result = BTN1;
    else if (ButtonPressed(BTN2, false))
      result = BTN2;
    else if (ButtonPressed(BTN3, false))
      result = BTN3;
    else if (ButtonPressed(BTN4, false))
      result = BTN4;

    // don't wait until BtnUp - if to wait: use getchar() !
    return result;
}

inline bool btnhit(){
   return ( ButtonPressed(BTN1, false) || ButtonPressed(BTN2, false)
         || ButtonPressed(BTN3, false) || ButtonPressed(BTN4, false));
}


char LCDline[]={56,48,40,32,24,16,8,0};

///////////////////////////////////////////////////////////////////////////////

#define MinPause  80
#define dbOffset  60

int  SoundLevel, BGrndNoise=50, dbMin, dbMax;
int  SoundRecord[300];        // detection: 0...300:
int  SoundPattern[300][5];   // patterns: 8
char key;

task SoundCheck() {
  int t,     // timer counter
      p,     // pause counter
      i, j,  // index
      j_best,
      d2,
      buf;
  long sum[300], sum_min;
  string str;
  
  while(true) {
    str=".";
    SoundLevel=SensorValue(S2);
    printf1(0,LCDline[0], "%s", "SoundLevel=");
    printf1(70,LCDline[0], "%4d", SoundLevel);

    ////////////////////////////////////////
    //  record if min sound level reached //
    ////////////////////////////////////////
    if (SoundLevel>(BGrndNoise + dbOffset)) {
      p=t=0;
      t++;
      dbMax=0;
      ClearLine(LCDline[7]);
      ClearLine(LCDline[3]);
      while (t<300) {
        SoundRecord[t]=SoundLevel=SensorValue(S2);

        printf1(70,LCDline[0], "%4d", SoundLevel);
        if (SoundLevel > dbMax) dbMax=SoundLevel;

        // if observe Pause then Rec_Stop
        p= (SoundLevel<dbOffset)? p+1 : 0;
        if (p==MinPause) break;
        
        printf1(0, LCDline[7], "%s", str);
        Wait(3);
        t++;
        if(t%25==0) str+=".";
      }
      SoundRecord[0]=t-MinPause; // sound rec length
      
      printf2(0, LCDline[6], "len=%3d", " max=%4d", t, dbMax);

      ClearLine(LCDline[1]);
      ClearLine(LCDline[7]);


      //////////////////////////////////////////
      // stretch sound level spectrum 0-1023  //
      //////////////////////////////////////////
      for (i=1; i<300; i++) {
        buf=SoundRecord[i];
        if (buf>BGrndNoise)
          SoundRecord[i]=buf*1023/dbMax; // normalize loudness spectrum
        if (1>SoundRecord[0]) SoundRecord[i] =0;
      }

      //////////////////////////////////////////
      //   normalize to sound level steps     //
      //////////////////////////////////////////
      for (i=1; i<t; i++) {
        buf=SoundRecord[i];
        if (buf>900)
          SoundPattern[i][0]=800; // max loudness
        else

        if (buf>500)
          SoundPattern[i][0]=400; //
        else
        if (buf>300)
          SoundPattern[i][0]=200; //
        else
        if (buf>BGrndNoise)
          SoundPattern[i][0]=100; // min loudness
        else
          SoundPattern[i][0]=0; // no loudness
      }

      SoundPattern[0][0]=SoundRecord[0];
      
      //////////////////////////////////////////
      //   allow sound record to be stored    //
      //////////////////////////////////////////

      printf1(1, LCDline[7], "%s", "press key to store..." );
      Wait(500);
      if ( btnhit() ) {
         key=getchar();
         for (i=0; i<300; i++)
           SoundPattern[i][key+1]=SoundPattern[i][0];
         printf1(1, LCDline[7], "stored rec. Btn%d", key+1 );
      }

      //////////////////////////////////////////
      //  compare and recognize sound record  //
      //////////////////////////////////////////
      sum_min=LONG_MAX; j_best=INT_MAX;
      for (j=1; j<5; j++) {
        sum[j]=0;
        if (SoundPattern[0][j]>10) {
          for (i=1; i < 300; i++) {
            d2=(SoundPattern[i][0]-SoundPattern[i][j]);
            d2=d2*d2;
           sum[j]=sum[j] + d2;
          }
        }
        else {
          sum[j]=LONG_MAX;
        }
        buf=sum[j];
        // printf1(1, LCDline[1], "sum=%6d", buf);
        if (sum[j]<sum_min) {
          sum_min=sum[j];
          j_best=j;
          // printf1(1, LCDline[2], "min=%5d", sum_min );
        }
      }
      printf1(1, LCDline[3], "recogn=Btn%d", j_best );
    }

  } // while
} // SoundCheck

task main(){

  SetLongAbort(true);
  SetSensorType(1, SENSOR_TYPE_SOUND_DBA);
  SetSensorMode(1, SENSOR_MODE_RAW);
  
  Wait(300);
  BGrndNoise=SensorValue(S2)+18;
  
  StartTask(SoundCheck);
  while (true)  {


  }
}


