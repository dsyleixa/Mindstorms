// Fast Fourier Transformation for NXT
// version 1.6
// source for NXC
// tested with BricxCC 3.3.8.10  (2011-July-03)
// orig. ANSI C source:
// http: //read.pudn.com/downloads92/sourcecode/graph/360640/work3/fft2.h__.htm
// modified by HaWe 2011
//
// user interface (display list + program control)
// BtnLeft  < scroll back/up array lines
// BtnRight > scroll fwd/down array lines
// BtnExit    toggle end/start of array
// BtnCenter  OK / quit

//--------------------------------------------------
// IO functions
//--------------------------------------------------

const char LCDline[]={56,48,40,32,24,16,8,0};
const string clrln="                 ";

#define printf1( _x, _y, _format1, _value1) { \
  string sval1 = FormatNum(_format1, _value1); \
  TextOut(_x, _y, sval1); \
}


inline bool btnhit(){
   return ( ButtonPressed(BTN1, false) || ButtonPressed(BTN2, false)
         || ButtonPressed(BTN3, false) || ButtonPressed(BTN4, false));
}


void PressToContinue(char Button) {
   string msg;
   if (Button==BTNCENTER)   msg="press BtnCntr...";
   else
   if (Button==BTNEXIT)     msg="press BtnExit...";
   else
   if (Button==BTNRIGHT)    msg="press BtnRight...";
   else
   if (Button==BTNLEFT)     msg="press BtnLeft...";

   printf1(0,LCDline[7],"%s", msg);
   while (!ButtonPressed(Button, false)); while (btnhit());
}

//--------------------------------------------------
// math
//--------------------------------------------------

#define min(a,b) (a<b?a:b)

#define max(a,b) (a>b?a:b)


//--------------------------------------------------
// FFT
//--------------------------------------------------

const int fxyLen_=256;
float fx_[fxyLen_], fy_[fxyLen_],
      fxmax_ ,fxmin_, fymax_, fymin_, fxMabs_, fyMabs_;


int FFT(int dir)
{
   long  nn,i,i1,j,k,i2,l,l1,l2;
   float c1,c2,tx,ty,t1,t2,u1,u2,z;

   /* Calculate the number of points */

   int m= log(fxyLen_)/log(2);

   nn = 1;
   for (i=0;i<m;i++)
      nn *= 2;

   /* Do the bit reversal */
   i2 = nn >> 1;
   j = 0;
   for (i=0;i<nn-1;i++) {
      if (i < j) {
         tx = fx_[i];
         ty = fy_[i];
         fx_[i] = fx_[j];
         fy_[i] = fy_[j];
         fx_[j] = tx;
         fy_[j] = ty;
      }
      k = i2;
      while (k <= j) {
         j -= k;
         k >>= 1;
      }
      j += k;
   }

   /* Compute the FFT */

   ClearScreen();
   printf1(0,LCDline[0],"%s", "Computing FFT... ");

   c1 = -1.0;
   c2 = 0.0;
   l2 = 1;
   for (l=0;l<m;l++) {
      printf1(0,LCDline[1],"%d", l);
      l1 = l2;
      l2 <<= 1;
      u1 = 1.0;
      u2 = 0.0;
      for (j=0;j<l1;j++) {
         for (i=j;i<nn;i+=l2) {
            i1 = i + l1;
            t1 = u1 * fx_[i1] - u2 * fy_[i1];
            t2 = u1 * fy_[i1] + u2 * fx_[i1];
            fx_[i1] = fx_[i] - t1;
            fy_[i1] = fy_[i] - t2;
            fx_[i] += t1;
            fy_[i] += t2;
         }
         z =  u1 * c1 - u2 * c2;
         u2 = u1 * c2 + u2 * c1;
         u1 = z;
      }
      c2 = sqrt((1.0 - c1) / 2.0);
      if (dir == 1)
         c2 = -c2;
      c1 = sqrt((1.0 + c1) / 2.0);
   }

   /* Scaling for forward transform */
   if (dir == 1) {
      for (i=0;i<nn;i++) {
         fx_[i] /= nn;
         fy_[i] /= nn;
      }
   }
   printf1(0,LCDline[3],"%s", "FFT ready!");

   return(1);
}

void ArrayRange(){
  fxmax_=ArrayMax(fx_, NA, NA);
  fxmin_=ArrayMin(fx_, NA, NA);
  fxMabs_=max(abs(fxmin_), abs(fxmax_));

  fymax_=ArrayMax(fy_, NA, NA);
  fymin_=ArrayMin(fy_, NA, NA);
  fyMabs_=max(abs(fymin_), abs(fymax_));
}


void FillArray1() {          // pattern 1111111111111111111111111111111
  int i;
  for (i=0; i<fxyLen_; ++i) fx_[i]=1;

  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}

void FillArray101(){         // pattern  111111000000001111111111111111
  int i;
  for (i=0; i<fxyLen_; ++i) fx_[i]=1;
  for (i=10; i<20; ++i) fx_[i]=0;

  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}


void FillArraySin() {       // single sin frequence: wavelength=32
  int i;
  for (i=0; i<fxyLen_; ++i) fx_[i]=sin(i*PI*3600.0/(310.0*180.0));
  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}

void FillArraySin_2_() {    // single sin frequence: wavelength=32 +2
  int i;
  for (i=0; i<fxyLen_; ++i) fx_[i]=2+ sin(i*PI*3600.0/(310.0*180.0));
  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}

void FillArraySin2() {       // double sin frequence: wavelength=16
  int i;
  for (i=0; i<fxyLen_; ++i) fx_[i]=sin(i*PI*3600.0/(155.0*180.0));
  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}

void FillArray10Sin() {     // single sin frequence: wavelength=32 scale=10
  int i;
  for (i=0; i<fxyLen_; ++i) fx_[i]=10*sin(i*PI*3600.0/(310.0*180.0));
  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}

void FillArraySinAbs() {     // single sin frequence: wavelength=32 , abs()
  int i;
  for (i=0; i<fxyLen_; ++i) fx_[i]=abs(sin(i*PI*3600.0/(310.0*180.0)));
  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}


void FillArraySin2Sin() {    // single+double sin frequences: wavelength=16+32
  int i;
  for (i=0; i<fxyLen_; ++i)
    fx_[i]=sin(i*PI*3600.0/(155.0*180.0))+sin(i*PI*3600.0/(310.0*180.0)) ;
  for (i=0; i<fxyLen_; ++i) fy_[i]=0;
}


void ArrayThreshold() {       // suppresses small values to zero
  int i;

  ArrayRange();
  for (i=0; i<fxyLen_; ++i) {
    if ((fx_[i]>0) && (fx_[i]<= fxMabs_/10))  fx_[i]=0;
    if ((fx_[i]<0) && (fx_[i]>=-fxMabs_/10))  fx_[i]=0;
    if ((fy_[i]>0) && (fy_[i]<= fyMabs_/10))  fy_[i]=0;
    if ((fy_[i]<0) && (fy_[i]>=-fyMabs_/10))  fy_[i]=0;
  }
}

void ArrayExtremes() {         // extracts extremes (min, max), gradient=zero
  int i;

  if ((fx_[0]>0) && (fx_[0]<fx_[1])) fx_[0]=0;
  if ((fx_[0]<0) && (fx_[0]>fx_[1])) fx_[0]=0;
  if ((fx_[fxyLen_-1]>0) && (fx_[fxyLen_-1]<fx_[fxyLen_-2])) fx_[fxyLen_-1]=0;
  if ((fx_[fxyLen_-1]<0) && (fx_[fxyLen_-1]>fx_[fxyLen_-2])) fx_[fxyLen_-1]=0;

  
  if ((fy_[0]>0) && (fy_[0]<fy_[1])) fy_[0]=0;
  if ((fy_[0]<0) && (fy_[0]>fx_[1])) fy_[0]=0;
  if ((fy_[fxyLen_-1]>0) && (fy_[fxyLen_-1]<fy_[fxyLen_-2])) fy_[fxyLen_-1]=0;
  if ((fy_[fxyLen_-1]<0) && (fy_[fxyLen_-1]>fy_[fxyLen_-2])) fy_[fxyLen_-1]=0;
  
  for (i=1; i<fxyLen_-1; ++i) {
     if ((fx_[i]>0) && (fx_[i-1]<fx_[i]) && (fx_[i+1]>=fx_[i]))  fx_[i]=fx_[i-1];
     else
     if ((fx_[i]>0) && (fx_[i-1]>=fx_[i]) && (fx_[i+1]<fx_[i]))  fx_[i]=fx_[i+1];
     else
     if ((fx_[i]<0) && (fx_[i-1]<=fx_[i]) && (fx_[i+1]>fx_[i]))  fx_[i]=fx_[i+1];
     else
     if ((fx_[i]<0) && (fx_[i-1]>fx_[i]) && (fx_[i+1]<=fx_[i]))  fx_[i]=fx_[i-1];
     
     if ((fy_[i]>0) && (fy_[i-1]<fy_[i]) && (fy_[i+1]>=fy_[i]))  fy_[i]=fy_[i-1];
     else
     if ((fy_[i]>0) && (fy_[i-1]>=fy_[i]) && (fy_[i+1]<fy_[i]))  fy_[i]=fy_[i+1];
     else
     if ((fy_[i]<0) && (fy_[i-1]<=fy_[i]) && (fy_[i+1]>fy_[i]))  fy_[i]=fy_[i+1];
     else
     if ((fy_[i]<0) && (fy_[i-1]>fy_[i]) && (fy_[i+1]<=fy_[i]))  fy_[i]=fy_[i-1];

  
  }
  for (i=fxyLen_-2; i>0; --i) {
     if ((fx_[i]>0) && (fx_[i-1]<fx_[i]) && (fx_[i+1]>=fx_[i]))  fx_[i]=fx_[i-1];
     else
     if ((fx_[i]>0) && (fx_[i-1]>=fx_[i]) && (fx_[i+1]<fx_[i]))  fx_[i]=fx_[i+1];
     else
     if ((fx_[i]<0) && (fx_[i-1]<=fx_[i]) && (fx_[i+1]>fx_[i]))  fx_[i]=fx_[i+1];
     else
     if ((fx_[i]<0) && (fx_[i-1]>fx_[i]) && (fx_[i+1]<=fx_[i]))  fx_[i]=fx_[i-1];

     if ((fy_[i]>0) && (fy_[i-1]<fy_[i]) && (fy_[i+1]>=fy_[i]))  fy_[i]=fy_[i-1];
     else
     if ((fy_[i]>0) && (fy_[i-1]>=fy_[i]) && (fy_[i+1]<fy_[i]))  fy_[i]=fy_[i+1];
     else
     if ((fy_[i]<0) && (fy_[i-1]<=fy_[i]) && (fy_[i+1]>fy_[i]))  fy_[i]=fy_[i+1];
     else
     if ((fy_[i]<0) && (fy_[i-1]>fy_[i]) && (fy_[i+1]<=fy_[i]))  fy_[i]=fy_[i-1];

  }

}

void PrintArray2(string caption) {
   int i, j, k;
   char ExitBtnSwitchMode=1;    // toggle between ^home and ^end

   float  scale  = 1;
   string FmtStr = "%6.3f ";

   ClearScreen();
   printf1(0,LCDline[0], "%s", caption);
   printf1(0,LCDline[1], "%s", "idx  [x]    [y]");

   i=j=k=0;
   while(j<fxyLen_) {
     k=0;
     for (i=0; i<6; ++i) {
       if (j<fxyLen_) {
          printf1( 0, LCDline[i+2], "%d   ", j);
          printf1(18, LCDline[i+2], FmtStr, fx_[j]*scale);
          printf1(60, LCDline[i+2], FmtStr, fy_[j]*scale);
          ++k;
       }
       ++j;
     }
     if (k<5) {
       while (k<6) {
         printf1(0,LCDline[k+2], "%s", clrln);
         ++k;
       }
     }

     while  (!btnhit());
     if (ButtonPressed(BTNLEFT, false)) {      // scroll back
       j=j-12;
       if (j<0) j=0;
       if (btnhit()) Wait(300);
     }
     else
     if (ButtonPressed(BTNRIGHT, false)) {     // scroll fwd
       if (j>fxyLen_-5) j=fxyLen_-5;
       if (j<0) j=0;
       if (j>=fxyLen_-5) printf1(0,LCDline[7], "%s", "quit: BtnCenter ");
       if (btnhit()) Wait(300);
     }
     else
     if (ButtonPressed(BTNCENTER, false)) {    // quit
       while  (btnhit());
       if (j<fxyLen_-1) j=j-6;
       if (j<0) j=0;
     }
     else
     if (ButtonPressed(BTNEXIT, false)) {      // last <-> first
       if (ExitBtnSwitchMode) {
         j=fxyLen_-5;
         if (j<0) j=0;
         printf1(0,LCDline[7], "%s", "quit: BtnCenter ");
       }
       else {
         j=0;
        }
       ExitBtnSwitchMode^=1;
       while (btnhit());
     }
   }
   ClearScreen();
}

void DrawArray2(string caption){
   int t, h;
   float tscale, xscale, yscale;

   ArrayRange();
   tscale=75.0/fxyLen_;
   xscale=14/fxMabs_;
   yscale=14/fyMabs_;
   
   printf1(0,60,"%s", caption);
   for (t=0; t<fxyLen_; ++t) {
     h=fx_[t]*xscale;
     LineOut  (t*tscale,  42,  t*tscale,  42+h);
   }
   printf1(84,40,"%s", "x");
   printf1(76,48,"%4.2f", fxMabs_);

   for (t=0; t<fxyLen_; ++t) {
     h=fy_[t]*yscale;
     LineOut  (t*tscale,  14,  t*tscale,  14+h);
   }
   printf1(84, 8,"%s", "y");
   printf1(76,16,"%4.2f", fyMabs_);
}

task main() {
   int i;
   char ch;

   SetAbortFlag(BTNSTATE_NONE);

   FillArraySin2Sin();  //  initialize by test values
   PrintArray2("Sin(a)+Sin(2a)");
   DrawArray2("Sin(a)+Sin(2a)");
   while (!btnhit());

   FFT(+1);  //  forward FFT

   PrintArray2("FFT Sina+Sin(2a)");
   DrawArray2("FFT Sina+Sin(2a)");
   while (!btnhit());

   ArrayThreshold();
   PrintArray2("thres Sina+Sin2a");
   DrawArray2("thres Sina+Sin2a");
   while (!btnhit());
   
   ArrayExtremes();
   PrintArray2("extr Sina+Sin2a");
   DrawArray2("extr Sina+Sin2a");
   while (!btnhit());
   
   FFT(-1);  //  reverse FFT
   PrintArray2("-FFT Thres/Extr");
   DrawArray2("-FFT Thres/Extr");
   while (!btnhit());


   SetAbortFlag(BTNSTATE_PRESSED_EV);
   PressToContinue(BTNEXIT);
   
   while(1);

}
