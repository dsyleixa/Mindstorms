// Conway's Game of Life
// http://en.wikipedia.org/wiki/Conway's_Game_of_Life
// Code adapted from http://cboard.cprogramming.com/c-programming/128982-simple-life-game-code-near-end.html

// Author: Xander Soldaat (xander_at_botbench.com)
// 30 September 2014
// version 1.3
// ported to NXC be HaWe 01 October 2014


// Increase the chance of an initially live cell
// by making this number smaller

#define seedChance  6

#define  blockSize  2

#define  frame      5

#define NXT

#define screenWidth   100

#define screenHeight   64

#define sizeof()             SizeOf()

#define eraseDisplay()       ClearScreen()

#define sleep(ms)            Wait(ms)

#define memset(a,v,s)        ArrayInit(a,v,s)

#define memset2D(array, tmp, init_val, dimx, dimy) { \
  ArrayInit(tmp, init_val, dimy);  \
  ArrayInit(array, tmp, dimx);     \
  ArrayInit(tmp,0,0);              \
}



inline bool btnhit() {
   return ( ButtonPressed(BTN1, false) || ButtonPressed(BTN2, false)
         || ButtonPressed(BTN3, false) || ButtonPressed(BTN4, false));
}



inline void fillRect(int x1,int y1, int x2,int y2) {
  RectOut(x1,y1, (x2-x1), (y2-y1), DRAW_OPT_FILL_SHAPE);
}



int maxx = ( screenWidth / blockSize) + 2*frame;
int maxy = ( screenHeight/ blockSize) + 2*frame;



// We need two boards, one for the current generation and one for calculating the next one
// Optimization tip: use bits instead of entire bytes for the cell status
char board[maxx][maxy];
char tmpboard[maxx][maxy];




// Count thy neighbours
int countNeighbours(int cx, int ry)
{
  int count = 0;
  for (int x = -1; x <= +1; x++)
  {
    for (int y = -1; y <= +1; y++)
    {
      if ((board[cx+x][ry+y] == 1) && (x != 0 || y != 0))
        count++;
    }
  }
  return count;
}





// Calculate the cells that will live and die for the next generation

void calculateGeneration()
{
  int aliveNeighbours = 0, tmp[];

  // Clear the boardfor the next generation
  memset2D(tmpboard, tmp, 0, maxx, maxy);

  for (int ry = 1; ry < (maxy-1); ++ry)
  {
    for (int cx = 1; cx < (maxx-1); ++cx)
    {
      aliveNeighbours = countNeighbours(cx, ry);

      // Rules taken from http://en.wikipedia.org/wiki/Conway's_Game_of_Life

      // Any live cell with fewer than two live neighbours dies, as if caused by under-population.
      if(aliveNeighbours < 2)
        tmpboard[cx][ry] = 0;

      // Any live cell with two or three live neighbours lives on to the next calculateGeneration
      if (aliveNeighbours >= 2  &&  aliveNeighbours <= 3 )
        tmpboard[cx][ry] = board[cx][ry];

      // Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction
      if(aliveNeighbours == 3 && board[cx][ry]==0)
        tmpboard[cx][ry] = 1;

      // Any live cell with more than three live neighbours dies, as if by overcrowding
      if(aliveNeighbours > 3)
        tmpboard[cx][ry] = 0;
    }
  }
  // Copy the new board to the old one
  memcpy(board, tmpboard, sizeof(tmpboard));
}





// Draw all the cells
void drawBoard()
{
  eraseDisplay();
  
  for (int ry = 0; ry < (maxy - 2); ry++)
  {
    for (int cx = 0; cx < (maxx - 2); cx++)
    {
      // Draw all the "live" cells.
      if (board[cx][ry])          // RobotC bug <<<<<<<<<<<<<<<<<<< +1 ????

        fillRect(cx*blockSize+frame, ry*blockSize+frame,
        (cx*blockSize)+blockSize+frame, (ry*blockSize)+blockSize+frame);
    }
  }
}





void Put_Bar3(int startx, int starty) {       // min x,y = frame size !!

  board[startx][starty]   = 1;
  board[startx][starty+1] = 1;
  board[startx][starty+2] = 1;

}



void Put_R_pentomino(int startx, int starty) {    // min x,y = frame size !!

  board[startx+1][starty+1]   = 1;

  board[startx+2][starty ]    = 1;
  board[startx+2][starty+1]   = 1;

  board[startx+3][starty+1]   = 1;
  board[startx+3][starty+2]   = 1;

}




void Put_GospersGlider(int startx, int starty) {    // min x,y = frame size !!

  int x,y;

  char pattern[][] = {  // pattern turned 90 degrees for design convenience!
  {0,1,0,},
  {0,0,1,},
  {1,1,1,}
  } ;
  
  for(x=0; x<3; ++x) {
    for(y=0; y<3; ++y) {

      board[startx+1+x][starty+1+y]=pattern[2-y][x] ;

    }
  }
}




void Put_GospersGliderGun() {

  int x,y;

  char pattern[][] = {  // pattern turned 90 degrees for design convenience!
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
  {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1},
  {0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
  {0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
  } ;
  
  for(x=0; x<37; ++x) {   // NXT screen (0,0) is bottom left, not top left  !
    for(y=0; y<9; ++y) {
    
      board[x+1][maxy-2*frame-9-y+1]=pattern[y][x] ;
    }
  }
}





void put_RandomPattern() {

  for (int cx = 1; cx < (maxx - 1); cx++)
   {
     for (int ry = 1; ry < (maxy - 1); ry++)
     {
       board[cx][ry] = !(rand() % seedChance);
     }
   }
}





void initBoard()
{
   int temp[];

   memset2D(board, temp, 0, maxx, maxy);


   // entweder feste Startmuster, z.B.:
   
   // Put_GospersGlider(40,20);
   // Put_Bar3(2,2);
   // Put_R_pentomino(10,10);
   Put_GospersGliderGun();
   
   
   // oder: randomisiert!

   // put_RandomPattern();

}




void presstostart() {
  eraseDisplay();
  TextOut(0,32,"start: press btn");
  while (!btnhit() ) {Wait(10);}
}





task main()
{
  unsigned long time, g;

  SetSleepTimeout(0);
  //presstostart();
  
  time=CurrentTick();
  srand(time);

  initBoard();
  drawBoard();
  sleep(1);
  

  while (true)
  {
    calculateGeneration();
    drawBoard();
    NumOut(0,0, ++g);
  }
}
