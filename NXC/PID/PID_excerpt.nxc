float P=1.5, I=1.0, D=12;                  // P,I,D values, adjustable


task task_PID_A() {

  float PWMpwr, readold, errorold;
  long  clock, dtime;                      // timer
  
  PID_A.read = (MotorRotationCount(OUT_A));
  PID_A.err  = PID_A.target - PID_A.read;  // error to target
  clock      = CurrentTick();


  do {

    dtime    = CurrentTick() - clock;      // get current (actual) loop time
    clock    = CurrentTick();


    PID_A.integr = (0.75 * PID_A.integr) + PID_A.err;


    PWMpwr= (P *PID_A.err) + (I *PID_A.integr)*dtime/20.0 + (D *(PID_A.err-errorold))/(dtime/20.0);

    PID_A.outp = round(PWMpwr);


    //**************************************************************************

    OnFwd(OUT_A, (PID_A.outp));         // action !

    Wait(20);                           // wait regulation time

    //**************************************************************************

    readold     = PID_A.read;                           // save old sensor
    errorold    = PID_A.err;                            // save old error

    PID_A.read  = (MotorRotationCount(OUT_A));          // get new encoder value
    PID_A.err   = PID_A.target-MotorRotationCount(OUT_A);              // new error to target


  } while ((abs(PID_A.err)> 0 );         // target reached

  Off(OUT_A);                            // finished - brake motor

  PID_A.outp=0;


  Wait(1);

}

