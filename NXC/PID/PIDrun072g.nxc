// PID controller: exactly approaching an encoder target by a motor
// ver 0.70g

// reported bug: sometimes overshooting (to be optimized)
// featuring rotation speed setting   (to be optimized)

// (c) HaWe 2013


#define debug

//forward:
void RotatePIDAtoTarget(char out, long Target, float RotatSpeed);



#define printf1( _x, _y, _format1, _value1) {  \
  string sval1 = FormatVal(_format1, _value1); \
  TextOut(_x, _y, sval1); \
}


inline long round(float f) { return (f>0?(f+0.5):(f-0.5)); }



struct PIDstruct {
                 // custom target values
  long  target;                  // set target
  int   tarpwm;                  // motor target speed
  
                 // customregulation parameters
  float P;                       // P: basic propotional to error
  float I;                       // I: integral: avoid peter out
  float D;                       // D: derivative: avoid jerking
  float precis;                  // error precision to target
  int   looptime;                // PID loop time

                 // internal control variables
  char  runstate;                // monitors runstate
  float out;                     // PID control output value
  int   maxout;                  // max output (max motor pwr)
  float read;                    // current sensor reading
  float err;                     // current error
  float integr;                  // integral of errors
  float dampU;                   // damp integral of errors upper range
  float dampM;                   // damp integral of errors medium range
  float dampL;                   // damp integral of errors lower range
  float cspeed;                  // current speed

} ;


PIDstruct PID_A, PID_B, PID_C;




task task_PID_A() {
  float aspeed, damp, PWMpwr, oPWMpwr, readold, errorold;
  long  cmax, cmin;                         // for monitoring
  long  starttime, runtime, clock, dtime;   // timer


  PID_A.runstate = 1;                           // indicates: task active!
  PID_A.read     = MotorRotationCount(OUT_A);   // get current encoder reading
  PID_A.err      = PID_A.target - PID_A.read;   // error to target

  //............................................................................
  // init variables for graph output
  int timex, oldtx, oldy=15, pwm0=15;           // values for graphic screen

  float scrXratio, scrYratio;
  scrXratio=PID_A.target/8;
  if(PID_A.target<50) scrXratio=PID_A.target/4;

  scrYratio=PID_A.target/40;

  //............................................................................

  damp=0;                                 // damp the integral memory

  starttime= CurrentTick();


  // appoach target
  _Astart:
  do {
                                                             // damp integral
    oPWMpwr= PWMpwr;

    if(abs(PID_A.integr)>(3*PID_A.maxout)) damp=PID_A.dampL; // huge error integral
    else
    if (abs(PID_A.err)  <(1*PID_A.maxout)) damp=PID_A.dampU; // very short distance

    else                                   damp=PID_A.dampM; // medium distance

    PID_A.integr= (damp * PID_A.integr) + PID_A.err;
    
    PWMpwr= (PID_A.P*PID_A.err) + (PID_A.I*PID_A.integr) + (PID_A.D*(PID_A.err-errorold));

    if(PWMpwr >  PID_A.maxout) PWMpwr=  PID_A.maxout;   // forward maxout
    else
    if(PWMpwr < -PID_A.maxout) PWMpwr= -PID_A.maxout;   // reverse maxout

    //if (abs(PID_A.err)<=PID_A.precis)  Off(OUT_A);

    dtime    = CurrentTick() - clock;
    clock    = CurrentTick();
    runtime  = clock - starttime;

    PID_A.cspeed= (PID_A.read-readold)*100/dtime;  // rotat speed [degrees/100ms]

    aspeed = abs(PID_A.cspeed) ;
    
    if (aspeed > PID_A.tarpwm)  {
        PWMpwr = sign(PWMpwr)*PID_A.tarpwm;
    }
    
    PID_A.out = round(PWMpwr);

#ifdef debug
{
    //..........................................................................
    //  for graph output
    timex= runtime/scrXratio;
    PointOut(timex,PID_A.read/scrYratio);
    LineOut(oldtx, oldy, timex, pwm0+PID_A.cspeed*0.3);

    oldtx=timex; oldy=pwm0+PID_A.cspeed*0.3;

    //printf1( 0,56,"%5.1f" , PID_A.intgr);
    printf1( 0,48,"%5.1f" , PID_A.cspeed);
    printf1(36,08,"%5.1f" , PWMpwr);
    //..........................................................................
}
#endif

    //**************************************************************************

    OnFwd(OUT_A, round(PID_A.out));                     // action !

    Wait(PID_A.looptime);                              // wait loop time

    //**************************************************************************

    readold     = PID_A.read;                           // save old sensor
    errorold    = PID_A.err;                            // save old error

    PID_A.read  = MotorRotationCount(OUT_A);            // get new encoder value
    PID_A.err   = PID_A.target-PID_A.read;              // new error to target

    if (PID_A.read>cmax) cmax=PID_A.read;               // monitor overshooting
    if (PID_A.read<cmin) cmin=PID_A.read;               // monitor overshooting

#ifdef debug
{
    //..........................................................................
    printf1(63, 56,"%-6d" , PID_A.read);
    printf1(63, 48,"%-6d" , cmax);
    printf1(63, 32,"%-6d" , cmin);
    //..........................................................................
}
#endif
    
    if (abs(PID_A.err)<=PID_A.precis) {PID_A.runstate +=1 ;}

  } while ((abs(PID_A.err)>=PID_A.precis) && (PID_A.runstate<=5));  // target reached


  Off(OUT_A);                                      // finished - brake motor
  PID_A.out=0;
  Wait(50);
  PID_A.read = MotorRotationCount(OUT_A);
  PID_A.runstate=1;

  if (PID_A.read>cmax) cmax=PID_A.read;            // detect overshooting
  if (PID_A.read<cmin) cmin=PID_A.read;            // detect overshooting
  PID_A.err = PID_A.target-PID_A.read;

#ifdef debug
{
  printf1(63, 56,"%-6d" , PID_A.read);
  printf1(63, 48,"%-6d" , cmax);
  printf1(63, 32,"%-6d" , cmin);
}
#endif

  if ((abs(PID_A.err)>PID_A.precis))  {goto _Astart;}


#ifdef debug
{
  //............................................................................
  PointOut(timex,PID_A.read/scrYratio);
  LineOut(oldtx, oldy, timex, pwm0);
  LineOut(timex+2,PID_A.target/scrYratio, timex+10, PID_A.target/scrYratio);
  LineOut(timex+2, pwm0, timex+10, pwm0);
  //............................................................................
}
#endif

  PID_A.runstate=0;

}

//==============================================================================

task task_PID_B() {
  float aspeed, damp, PWMpwr, oPWMpwr, readold, errorold;
  long  cmax, cmin;                         // for monitoring
  long  starttime, runtime, clock, dtime;   // timer


  PID_B.runstate = 1;                           // indicates: task active!
  PID_B.read     = MotorRotationCount(OUT_B);   // get current encoder reading
  PID_B.err      = PID_B.target - PID_B.read;   // error to target

  //............................................................................
  // init variables for graph output
  int timex, oldtx, oldy=15, pwm0=15;           // values for graphic screen

  float scrXratio, scrYratio;
  scrXratio=PID_B.target/8;
  if(PID_B.target<50) scrXratio=PID_B.target/4;

  scrYratio=PID_B.target/40;

  //............................................................................

  damp=0;                                 // damp the integral memory

  starttime= CurrentTick();


  // appoach target
  _Bstart:
  do {
                                                             // damp integral
    oPWMpwr= PWMpwr;

    if(abs(PID_B.integr)>(3*PID_B.maxout)) damp=PID_B.dampL; // huge error integral
    else
    if (abs(PID_B.err)  <(1*PID_B.maxout)) damp=PID_B.dampU; // very short distance

    else                                   damp=PID_B.dampM; // medium distance

    PID_B.integr= (damp * PID_B.integr) + PID_B.err;

    PWMpwr= (PID_B.P*PID_B.err) + (PID_B.I*PID_B.integr) + (PID_B.D*(PID_B.err-errorold));

    if(PWMpwr >  PID_B.maxout) PWMpwr=  PID_B.maxout;   // forward maxout
    else
    if(PWMpwr < -PID_B.maxout) PWMpwr= -PID_B.maxout;   // reverse maxout

    //if (abs(PID_B.err)<=PID_B.precis)  Off(OUT_B);

    dtime    = CurrentTick() - clock;
    clock    = CurrentTick();
    runtime  = clock - starttime;

    PID_B.cspeed= (PID_B.read-readold)*100/dtime;  // rotat speed [degrees/100ms]

    aspeed = abs(PID_B.cspeed) ;

    if (aspeed > PID_B.tarpwm)  {
        PWMpwr = sign(PWMpwr)*PID_B.tarpwm;
    }

    PID_B.out = round(PWMpwr);

#ifdef debug
{
    //..........................................................................
    //  for graph output
    timex= runtime/scrXratio;
    PointOut(timex,PID_B.read/scrYratio);
    LineOut(oldtx, oldy, timex, pwm0+PID_B.cspeed*0.3);

    oldtx=timex; oldy=pwm0+PID_B.cspeed*0.3;

    //printf1( 0,56,"%5.1f" , PID_B.intgr);
    printf1( 0,48,"%5.1f" , PID_B.cspeed);
    printf1(36,08,"%5.1f" , PWMpwr);
    //..........................................................................
}
#endif

    //**************************************************************************

    OnFwd(OUT_B, round(PID_B.out));                     // action !

    Wait(PID_B.looptime);                              // wait loop time

    //**************************************************************************

    readold     = PID_B.read;                           // save old sensor
    errorold    = PID_B.err;                            // save old error

    PID_B.read  = MotorRotationCount(OUT_B);            // get new encoder value
    PID_B.err   = PID_B.target-PID_B.read;              // new error to target

    if (PID_B.read>cmax) cmax=PID_B.read;               // monitor overshooting
    if (PID_B.read<cmin) cmin=PID_B.read;               // monitor overshooting

#ifdef debug
{
    //..........................................................................
    printf1(63, 56,"%-6d" , PID_B.read);
    printf1(63, 48,"%-6d" , cmax);
    printf1(63, 32,"%-6d" , cmin);
    //..........................................................................
}
#endif

    if (abs(PID_B.err)<=PID_B.precis) {PID_B.runstate +=1 ;}

  } while ((abs(PID_B.err)>=PID_B.precis) && (PID_B.runstate<=5));  // target reached


  Off(OUT_B);                                      // finished - brake motor
  PID_B.out=0;
  Wait(50);
  PID_B.read = MotorRotationCount(OUT_B);
  PID_B.runstate=1;

  if (PID_B.read>cmax) cmax=PID_B.read;            // detect overshooting
  if (PID_B.read<cmin) cmin=PID_B.read;            // detect overshooting
  PID_B.err = PID_B.target-PID_B.read;

#ifdef debug
{
  printf1(63, 56,"%-6d" , PID_B.read);
  printf1(63, 48,"%-6d" , cmax);
  printf1(63, 32,"%-6d" , cmin);
}
#endif

  if ((abs(PID_B.err)>PID_B.precis))  {goto _Bstart;}


#ifdef debug
{
  //............................................................................
  PointOut(timex,PID_B.read/scrYratio);
  LineOut(oldtx, oldy, timex, pwm0);
  LineOut(timex+2,PID_B.target/scrYratio, timex+10, PID_B.target/scrYratio);
  LineOut(timex+2, pwm0, timex+10, pwm0);
  //............................................................................
}
#endif

  PID_B.runstate=0;

}


//==============================================================================

task task_PID_C() {
  float aspeed, damp, PWMpwr, oPWMpwr, readold, errorold;
  long  cmax, cmin;                         // for monitoring
  long  starttime, runtime, clock, dtime;   // timer


  PID_C.runstate = 1;                           // indicates: task active!
  PID_C.read     = MotorRotationCount(OUT_C);   // get current encoder reading
  PID_C.err      = PID_C.target - PID_C.read;   // error to target

  //............................................................................
  // init variables for graph output
  int timex, oldtx, oldy=15, pwm0=15;           // values for graphic screen

  float scrXratio, scrYratio;
  scrXratio=PID_C.target/8;
  if(PID_C.target<50) scrXratio=PID_C.target/4;

  scrYratio=PID_C.target/40;

  //............................................................................

  damp=0;                                 // damp the integral memory

  starttime= CurrentTick();


  // appoach target
  _Cstart:
  do {
                                                             // damp integral
    oPWMpwr= PWMpwr;

    if(abs(PID_C.integr)>(3*PID_C.maxout)) damp=PID_C.dampL; // huge error integral
    else
    if (abs(PID_C.err)  <(1*PID_C.maxout)) damp=PID_C.dampU; // very short distance

    else                                   damp=PID_C.dampM; // medium distance

    PID_C.integr= (damp * PID_C.integr) + PID_C.err;

    PWMpwr= (PID_C.P*PID_C.err) + (PID_C.I*PID_C.integr) + (PID_C.D*(PID_C.err-errorold));

    if(PWMpwr >  PID_C.maxout) PWMpwr=  PID_C.maxout;   // forward maxout
    else
    if(PWMpwr < -PID_C.maxout) PWMpwr= -PID_C.maxout;   // reverse maxout

    //if (abs(PID_C.err)<=PID_C.precis)  Off(OUT_C);

    dtime    = CurrentTick() - clock;
    clock    = CurrentTick();
    runtime  = clock - starttime;

    PID_C.cspeed= (PID_C.read-readold)*100/dtime;  // rotat speed [degrees/100ms]

    aspeed = abs(PID_C.cspeed) ;

    if (aspeed > PID_C.tarpwm)  {
        PWMpwr = sign(PWMpwr)*PID_C.tarpwm;
    }

    PID_C.out = round(PWMpwr);

#ifdef debug
{
    //..........................................................................
    //  for graph output
    timex= runtime/scrXratio;
    PointOut(timex,PID_C.read/scrYratio);
    LineOut(oldtx, oldy, timex, pwm0+PID_C.cspeed*0.3);

    oldtx=timex; oldy=pwm0+PID_C.cspeed*0.3;

    //printf1( 0,56,"%5.1f" , PID_C.intgr);
    printf1( 0,48,"%5.1f" , PID_C.cspeed);
    printf1(36,08,"%5.1f" , PWMpwr);
    //..........................................................................
}
#endif

    //**************************************************************************

    OnFwd(OUT_C, round(PID_C.out));                     // action !

    Wait(PID_C.looptime);                              // wait loop time

    //**************************************************************************

    readold     = PID_C.read;                           // save old sensor
    errorold    = PID_C.err;                            // save old error

    PID_C.read  = MotorRotationCount(OUT_C);            // get new encoder value
    PID_C.err   = PID_C.target-PID_C.read;              // new error to target

    if (PID_C.read>cmax) cmax=PID_C.read;               // monitor overshooting
    if (PID_C.read<cmin) cmin=PID_C.read;               // monitor overshooting

#ifdef debug
{
    //..........................................................................
    printf1(63, 56,"%-6d" , PID_C.read);
    printf1(63, 48,"%-6d" , cmax);
    printf1(63, 32,"%-6d" , cmin);
    //..........................................................................
}
#endif

    if (abs(PID_C.err)<=PID_C.precis) {PID_C.runstate +=1 ;}

  } while ((abs(PID_C.err)>=PID_C.precis) && (PID_C.runstate<=5));  // target reached


  Off(OUT_C);                                      // finished - brake motor
  PID_C.out=0;
  Wait(50);
  PID_C.read = MotorRotationCount(OUT_C);
  PID_C.runstate=1;

  if (PID_C.read>cmax) cmax=PID_C.read;            // detect overshooting
  if (PID_C.read<cmin) cmin=PID_C.read;            // detect overshooting
  PID_C.err = PID_C.target-PID_C.read;

#ifdef debug
{
  printf1(63, 56,"%-6d" , PID_C.read);
  printf1(63, 48,"%-6d" , cmax);
  printf1(63, 32,"%-6d" , cmin);
}
#endif

  if ((abs(PID_C.err)>PID_C.precis))  {goto _Cstart;}


#ifdef debug
{
  //............................................................................
  PointOut(timex,PID_C.read/scrYratio);
  LineOut(oldtx, oldy, timex, pwm0);
  LineOut(timex+2,PID_C.target/scrYratio, timex+10, PID_C.target/scrYratio);
  LineOut(timex+2, pwm0, timex+10, pwm0);
  //............................................................................
}
#endif

  PID_C.runstate=0;

}

//==============================================================================


void RotatePIDtoTarget(char out, long Target, float RotatSpeed) {

  if (out==OUT_A) {

    if(PID_A.runstate!=0) {        // stop PID task if already running
      stop task_PID_A;
      PlayTone(TONE_C7,100);
      Off(OUT_A);
      Wait(100);

    }

    PID_A.runstate=1;                // monitoring runstate: PID active

    // general init PID_A
    PID_A.target=Target;                   // assign target
    PID_A.tarpwm=RotatSpeed;               // assign rotation speed
  
    // PID control defaults
    PID_A.runstate=1;                // runstate: PID active
    PID_A.out     =0;                // PID control output value
    PID_A.maxout  =100;              // absolute max possible output (max pwr)
    PID_A.read    =0;                // current reading
    PID_A.err     =0;                // current error
    PID_A.integr  =0;                // integral of errors
    PID_A.dampU   =0.90;             // damp integral of errors upper range
    PID_A.dampM   =0.80;             // damp integral of errors medium range
    PID_A.dampL   =0.70;             // damp integral of errors lower range
    PID_A.cspeed  =0;                // current speed


    start task_PID_A;
  }
  else
  if (out==OUT_B) {

    if(PID_B.runstate!=0) {        // stop PID task if already running
      stop task_PID_B;
      PlayTone(TONE_C7,100);
      Off(OUT_B);
      Wait(100);

    }

    PID_B.runstate=1;                // monitoring runstate: PID active

    // general init PID_B
    PID_B.target=Target;                   // assign target
    PID_B.tarpwm=RotatSpeed;               // assign rotation speed

    // PID control defaults
    PID_B.runstate=1;                // runstate: PID active
    PID_B.out     =0;                // PID control output value
    PID_B.maxout  =100;              // absolute max possible output (max pwr)
    PID_B.read    =0;                // current reading
    PID_B.err     =0;                // current error
    PID_B.integr  =0;                // integral of errors
    PID_B.dampU   =0.90;             // damp integral of errors upper range
    PID_B.dampM   =0.80;             // damp integral of errors medium range
    PID_B.dampL   =0.70;             // damp integral of errors lower range
    PID_B.cspeed  =0;                // current speed


    start task_PID_B;
  }
  else
  if (out==OUT_C) {

    if(PID_C.runstate!=0) {        // stop PID task if already running
      stop task_PID_C;
      PlayTone(TONE_C7,100);
      Off(OUT_C);
      Wait(100);

    }

    PID_C.runstate=1;                // monitoring runstate: PID active

    // general init PID_C
    PID_C.target=Target;                   // assign target
    PID_C.tarpwm=RotatSpeed;               // assign rotation speed

    // PID control defaults
    PID_C.runstate=1;                // runstate: PID active
    PID_C.out     =0;                // PID control output value
    PID_C.maxout  =100;              // absolute max possible output (max pwr)
    PID_C.read    =0;                // current reading
    PID_C.err     =0;                // current error
    PID_C.integr  =0;                // integral of errors
    PID_C.dampU   =0.90;             // damp integral of errors upper range
    PID_C.dampM   =0.80;             // damp integral of errors medium range
    PID_C.dampL   =0.70;             // damp integral of errors lower range
    PID_C.cspeed  =0;                // current speed


    start task_PID_C;
  }

}

//==============================================================================

inline void RotatePIDdegrees(char out, long Target, float RotatSpeed)  {
   RotatePIDtoTarget(out, Target+MotorRotationCount(out), RotatSpeed);
}


//==============================================================================


void SetPIDparam(char out,float P,float I,float D,float prec,int rtime) {  // custom PID parameters

  if (out==OUT_A) {
    PID_A.P       =P;             // P: propotional to error
    PID_A.I       =I;             // I: heavy load=0.70 - - - low load=0.40
    PID_A.D       =D;             // D: avoid error getting worse
    PID_A.precis  =prec;          // error precision to target
    PID_A.looptime=rtime;         // PID regulation time
    
  } else

  if (out==OUT_B) {
    PID_B.P       =P;             // P: propotional to error
    PID_B.I       =I;             // I: heavy load=0.70 - - - low load=0.40
    PID_B.D       =D;             // D: avoid error getting worse
    PID_B.precis  =prec;          // error precision to target
    PID_B.looptime=rtime;         // PID regulation time

  } else

  if (out==OUT_C) {
    PID_C.P       =P;             // P: propotional to error
    PID_C.I       =I;             // I: heavy load=0.70 - - - low load=0.40
    PID_C.D       =D;             // D: avoid error getting worse
    PID_C.precis  =prec;          // error precision to target
    PID_C.looptime=rtime;         // PID regulation time

  }

}


void PIDinit() {

  for (char out=0; out<3; ++out) {
    SetPIDparam(out, 0.40, 0.65, 24.0, 1, 5); // p,i,d, precis, regulation time
  }
}



//..........................................................................
// display, monitor, and debug

void DisplayMask() {

  printf1(36, 56,"cNew","" );
  printf1(36, 48,"cmax","" );
  printf1(36, 32,"cmin","");
  printf1(00, 08,"lout","");
  printf1(70, 08,"pwm 0","");
}


task Displayenc(){

  while(1) {
    printf1(14, 24,"%-6d", MotorRotationCount(OUT_A));
    printf1(42, 24,"%-6d", MotorRotationCount(OUT_B));
    printf1(70, 24,"%-6d", MotorRotationCount(OUT_C));
    
    printf1(14,  0,"%-6d", PID_A.target);
    printf1(42,  0,"%-6d", PID_B.target);
    printf1(70,  0,"%-6d", PID_C.target);
    
    Wait(50);
  }
}

//..........................................................................






task main() {

  long Target;                     // custom values
  int  RotatSpeed;
  
  PIDinit();
  
  start Displayenc;


  while(true) {

    Target     = 200;                // set new motor rotation target
    RotatSpeed =  80;                // set max rotation speed



#ifdef debug
    ClearScreen();
    DisplayMask();
#endif

    RotatePIDdegrees(OUT_A, Target, RotatSpeed);



    RotatePIDdegrees(OUT_B, Target, RotatSpeed);


    
    RotatePIDdegrees(OUT_C, Target, RotatSpeed);
    while (PID_A.runstate!=0);



    PlayTone(TONE_C4,100); Wait(100);
    printf1(0,56,"%s","OK");


    while (BTNCENTER!= getchar());      // wait for BtnCtr to abort
    
  }




  
  

}
