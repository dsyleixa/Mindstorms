// PID controller: exactly approaching an encoder target by a motor
// ver 4.9g

// reported bug: sometimes overshooting (to be optimized)
// featuring rotation speed setting   (to be optimized)

// (c) HaWe 2013


//forward:
void RotatePIDAtoTarget(long Target, float RotatSpeed);



#define printf1( _x, _y, _format1, _value1) {  \
  string sval1 = FormatVal(_format1, _value1); \
  TextOut(_x, _y, sval1); \
}


inline long round(float f) { return (f>0?(f+0.5):(f-0.5)); }



struct PIDstruct {
                 // custom values
  long  target;                  // set target
  float tspeed;                  // motor target speed
                 // regulation parameters
  float precis;                  // error precision to target
  float P;                       // P: basic propotional to error
  float I;                       // I: integral: avoid peter out
  float D;                       // D: derivative: avoid jerking
                 // internal control variables
  char  runstate;                // monitors runstate
  float out;                     // PID control output value
  float maxCtrl;                 // max output (max motor pwr)
  long  ltime;                   // loop time
  long  curr;                    // current sensor reading
  long  cold;                    // old sensor reading
  float err;                     // current error
  float errold;                  // previous error
  float intgr;                   // integral of errors
  float dampU;                   // damp integral of errors upper range
  float dampM;                   // damp integral of errors medium range
  float dampL;                   // damp integral of errors lower range
  float cspeed;                  // current speed
  float ospeed;                  // old speed
} ;


PIDstruct PID_A;


task task_PID_A() {
  float fvar;                           // float dummy
  long  cmax, cmin;                     // for monitoring
  long  clock, rtime, oldtime, dtime;   // timer


  PID_A.runstate = 1;                           // indicates: task active!
  PID_A.curr     = MotorRotationCount(OUT_A);   // get current encoder reading
  PID_A.err      = PID_A.target - PID_A.curr;   // error to target


  printf1( 0, 0,"P=%2.2f"  , PID_A.P);          // screen out P, I, D
  printf1(37, 0,"I=%2.2f"  , PID_A.I);
  printf1(76, 0,"D=%2.0f"  , PID_A.D);


  //............................................................................
  // init variables for graph output
  int timex, oldtx, oldy=15, pwm0=15;           // values for graphic screen

  float scrXratio, scrYratio;
  scrXratio=PID_A.target/8;
  if(PID_A.target<50) scrXratio=PID_A.target/4;

  scrYratio=PID_A.target/40;

  //............................................................................

  float damp=0;                                 // damp the integral memory

  Wait(1);                                      // 1ms for VM to apply values

  clock= CurrentTick();

  // appoach target
  Astart:
  do {
                                                                // damp integral
    if(abs(PID_A.intgr) > (3*PID_A.maxCtrl)) damp=PID_A.dampL;  // long distance or
    else                                                        //    huge integral
    if (abs(PID_A.err)  < (5*PID_A.ltime))   damp=PID_A.dampU;  // very short distance
    else
                                             damp=PID_A.dampM;  // medium distance

    PID_A.intgr= (damp * PID_A.intgr) + PID_A.err;
    
    PID_A.out= (PID_A.P*PID_A.err) + (PID_A.I*PID_A.intgr) + (PID_A.D*(PID_A.err-PID_A.errold));

    if(PID_A.out>PID_A.maxCtrl)  PID_A.out= PID_A.maxCtrl;   // forward maxCtrl
    else
    if(PID_A.out<-PID_A.maxCtrl) PID_A.out=-PID_A.maxCtrl;   // reverse maxCtrl

    //if (abs(PID_A.err)<=PID_A.precis)  Off(OUT_A);

    dtime   = (CurrentTick() - oldtime);
    oldtime = CurrentTick();
    rtime   = oldtime - clock;

    PID_A.cspeed= (PID_A.curr-PID_A.cold)*100/dtime;  // rotat speed [degrees/100ms]


    fvar = abs(PID_A.cspeed) ;

    if (fvar > PID_A.tspeed)
    {
        PID_A.out = PID_A.out* (( (fvar) )-PID_A.tspeed)/PID_A.maxCtrl;
    }
    /**/

  //............................................................................
    //  for graph output
    timex= rtime/scrXratio;
    PointOut(timex,PID_A.curr/scrYratio);
    LineOut(oldtx, oldy, timex, pwm0+PID_A.cspeed*0.3);

    oldtx=timex; oldy=pwm0+PID_A.cspeed*0.3;

    //printf1( 0,56,"%5.1f" , PID_A.intgr);
    printf1( 0,48,"%5.1f" , PID_A.cspeed);
    printf1(36,08,"%5.1f" , PID_A.out);
  //............................................................................

    //**************************************************************************

    OnFwd(OUT_A, round(PID_A.out));                     // action !

    Wait(PID_A.ltime);                                  // wait loop time

    //**************************************************************************

    PID_A.cold  = PID_A.curr;                           // save old sensor
    PID_A.errold= PID_A.err;                            // save old error
    PID_A.ospeed= PID_A.cspeed;                         // save old speed

    PID_A.curr  = MotorRotationCount(OUT_A);            // get new encoder value
    PID_A.err   = PID_A.target-PID_A.curr;              // new error to target

    if (PID_A.curr>cmax) cmax=PID_A.curr;               // monitor overshooting
    if (PID_A.curr<cmin) cmin=PID_A.curr;               // monitor overshooting

    printf1(63, 56,"%-6d" , PID_A.curr);
    printf1(63, 48,"%-6d" , cmax);
    printf1(63, 32,"%-6d" , cmin);


  } while (abs(PID_A.err)>PID_A.precis);                // target reached


  Off(OUT_A);                                      // finished - brake motor
  PID_A.out=0;
  Wait(60);
  PID_A.curr = MotorRotationCount(OUT_A);
  if (PID_A.curr>cmax) cmax=PID_A.curr;            // detect overshooting
  if (PID_A.curr<cmin) cmin=PID_A.curr;            // detect overshooting
  PID_A.err   = PID_A.target-PID_A.curr;
  printf1(63, 56,"%-6d" , PID_A.curr);
  printf1(63, 48,"%-6d" , cmax);
  printf1(63, 32,"%-6d" , cmin);

  if (abs(PID_A.err)>PID_A.precis) {goto Astart;}

  Wait(100);
  PID_A.curr = MotorRotationCount(OUT_A);
  printf1(63, 24,"%-6d" , PID_A.curr);


  //............................................................................


  PointOut(timex,PID_A.curr/scrYratio);
  LineOut(oldtx, oldy, timex, pwm0);
  LineOut(timex+2,PID_A.target/scrYratio, timex+10, PID_A.target/scrYratio);
  LineOut(timex+2, pwm0, timex+10, pwm0);
  //............................................................................
  PID_A.runstate=0;

}


void RotatePIDAtoTarget(long Target, float RotatSpeed) {

  if(PID_A.runstate!=0) {        // stop PID task if already running
    stop task_PID_A;
    PlayTone(TONE_C7,100);
    Off(OUT_A);
    Wait(100);

  }

  // general init PID_A
  /*
  PID_A.target=0;                // <<<<<< custom target
  PID_A.tspeed=100;              // <<<<<< custom motor target speed
  */
  PID_A.precis=1;                // error precision to target
  PID_A.P =0.5;                  // P: propotional to error
  PID_A.I =0.6;                  // I: heavy load=0.70 - - - low load=0.40
  PID_A.D =30;                   // D: avoid error getting worse
  PID_A.runstate=0;              // monitors runstate

  PID_A.out=0;                   // PID control output value
  PID_A.maxCtrl=100;             // absolute max possible output (max pwr)
  PID_A.ltime  =10;               // loop time
  PID_A.curr   =0;                // current reading
  PID_A.cold   =0;                // old current reading
  PID_A.err    =0;                // current error
  PID_A.errold =0;                // previous error
  PID_A.intgr  =0;                // integral of errors
  PID_A.dampU  =0.98;             // damp integral of errors upper range
  PID_A.dampM  =0.80;             // damp integral of errors medium range
  PID_A.dampL  =0.70;             // damp integral of errors lower range
  PID_A.cspeed =0;                // current speed
  PID_A.ospeed =0;                // old speed

  PID_A.target=Target;                         // assign target
  PID_A.tspeed=RotatSpeed;                     // assign rotation speed

  printf1(36, 56,"cNew","" );
  printf1(36, 48,"cmax","" );
  printf1(63, 40,"%6d", Target);
  printf1(36, 32,"cmin","");
  printf1(00, 08,"lout","");        //
  printf1(70, 08,"pwm 0","");


  start task_PID_A;

}



task main() {

  long  Target, RotatSpeed; // custom values

  //**************************************************************************
  // new start of PID control with custom values
  //**************************************************************************

  Target     = 90;               // set new motor rotation target
  RotatSpeed = 100;               // set max rotation speed

  RotatePIDAtoTarget(Target, RotatSpeed);


  //**************************************************************************


  while (PID_A.runstate==1);

  PlayTone(TONE_C4,100); //Wait(200); PlayTone(TONE_C5,100);

  while (BTNCENTER!= getchar());                   // wait for BtnCtr to abort

}
